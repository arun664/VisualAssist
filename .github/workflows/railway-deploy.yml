name: Deploy to Railway

on:
  push:
    branches: [ main ]
    paths: 
      - 'backend/**'
      - 'Dockerfile'
      - 'railway.json'
      - '.github/workflows/railway-deploy.yml'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Railway CLI
      run: |
        npm install -g @railway/cli
        
    - name: Verify Railway Configuration
      run: |
        echo "üöÇ Railway Deployment Configuration"
        echo "Dockerfile: $(ls -la Dockerfile 2>/dev/null || echo 'Not found')"
        echo "railway.json: $(ls -la railway.json 2>/dev/null || echo 'Not found')"
        echo ""
        echo "Backend files:"
        ls -la backend/ | head -10
        
    - name: Test Docker Build (optional)
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "üê≥ Testing Docker build locally..."
        docker build -t test-build .
        echo "‚úÖ Docker build successful"
        
    - name: Deploy to Railway
      run: |
        # Login to Railway
        railway login --token ${{ secrets.RAILWAY_TOKEN }}
        
        # Link to project (will create new service if needed)
        railway link ${{ secrets.RAILWAY_PROJECT_ID || 'visualassist-backend' }}
        
        # Deploy the application
        railway up --detach
        
        # Get deployment info
        railway status
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        
    - name: Create deployment summary
      run: |
        echo "## üöÇ Railway Deployment Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Deployment Details:" >> $GITHUB_STEP_SUMMARY
        echo "- **Service:** AI Navigation Assistant Backend" >> $GITHUB_STEP_SUMMARY
        echo "- **Build:** Docker (root-level Dockerfile)" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** Production" >> $GITHUB_STEP_SUMMARY
        echo "- **Health Check:** /health endpoint" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîó Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Check Railway dashboard for deployment status" >> $GITHUB_STEP_SUMMARY
        echo "2. Test the deployed service health endpoint" >> $GITHUB_STEP_SUMMARY
        echo "3. Update frontend configuration with new backend URL" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìä Expected Features:" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ FastAPI backend with full AI navigation features" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ YOLOv11 computer vision processing" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ WebSocket and WebRTC support" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Safety monitoring and navigation FSM" >> $GITHUB_STEP_SUMMARY
        echo "- ‚ö†Ô∏è Speech recognition (requires Vosk model)" >> $GITHUB_STEP_SUMMARY
        
    - name: Post-deployment verification
      run: |
        echo "üîç Verifying deployment..."
        
        # Wait a moment for service to start
        sleep 30
        
        # Try to get the service URL and test it
        SERVICE_URL=$(railway url 2>/dev/null || echo "")
        
        if [ ! -z "$SERVICE_URL" ]; then
          echo "Service deployed at: $SERVICE_URL"
          
          # Test health endpoint
          if curl -f -s "$SERVICE_URL/health" > /dev/null; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ö†Ô∏è Health check failed - service may still be starting"
          fi
        else
          echo "‚ö†Ô∏è Could not retrieve service URL"
        fi
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      continue-on-error: true